// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`replicad 1. replicad: 1. replicad 1`] = `
"
let [vcc, vout, gnd] = Nets()
let r1 = Resistor()
let r2 = r1.copy()

let vcc2 = Net()
let mistake5 = Net(\\"mistake5\\")

let mistake = Nets();

let [mistake2, mistake3, mistake4] = Nets(\\"mistakes\\");

let circuit = Circuit()
circuit.connect(vcc, r1)

      ↓ ↓ ↓ ↓ ↓ ↓

const __replicad__warnings__ = [];
const __replicad__errors__ = [];
let [vcc, vout, gnd] = Nets([\\"vcc\\", \\"vout\\", \\"gnd\\"]);
let r1 = Resistor();
let r2 = r1.copy();

let vcc2 = Net(\\"vcc2\\");
let mistake5 = Net(\\"mistake5\\");

__replicad__warnings__.append({
  \\"message\\": \\"'Net' takes no arguments, 1 provided. Arguments will be ignored\\",
  \\"loc\\": {
    \\"start\\": {
      \\"line\\": 6,
      \\"column\\": 0
    },
    \\"end\\": {
      \\"line\\": 6,
      \\"column\\": 30
    }
  }
});

__replicad__errors__.append({
  \\"message\\": \\"'Nets' called without array pattern.\\",
  \\"loc\\": {
    \\"start\\": {
      \\"line\\": 8,
      \\"column\\": 0
    },
    \\"end\\": {
      \\"line\\": 8,
      \\"column\\": 21
    }
  }
});

let [mistake2, mistake3, mistake4] = Nets([\\"mistake2\\", \\"mistake3\\", \\"mistake4\\"]);

__replicad__warnings__.append({
  \\"message\\": \\"'Nets' takes no arguments, 1 provided. Arguments will be ignored\\",
  \\"loc\\": {
    \\"start\\": {
      \\"line\\": 10,
      \\"column\\": 0
    },
    \\"end\\": {
      \\"line\\": 10,
      \\"column\\": 54
    }
  }
});

let circuit = Circuit();
circuit.connect(vcc, r1);
"
`;

exports[`replicad 2. replicad: 2. replicad 1`] = `
"
Net()
Nets()

      ↓ ↓ ↓ ↓ ↓ ↓

const __replicad__warnings__ = [];
const __replicad__errors__ = [];
__replicad__errors__.append({
  \\"message\\": \\"'Net' called without being assigned to variable.\\",
  \\"loc\\": {
    \\"start\\": {
      \\"line\\": 1,
      \\"column\\": 0
    },
    \\"end\\": {
      \\"line\\": 1,
      \\"column\\": 5
    }
  }
});
__replicad__errors__.append({
  \\"message\\": \\"'Nets' called without being assigned to variables.\\",
  \\"loc\\": {
    \\"start\\": {
      \\"line\\": 2,
      \\"column\\": 0
    },
    \\"end\\": {
      \\"line\\": 2,
      \\"column\\": 6
    }
  }
});
"
`;
