// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`replicad add net names into Net() and Nets(): add net names into Net() and Nets() 1`] = `
"
let [vcc, vout, gnd] = Nets()
let vout2 = Net()

      ↓ ↓ ↓ ↓ ↓ ↓

const __replicad__warnings__ = [];
const __replicad__errors__ = [];
let [vcc, vout, gnd] = Nets([\\"vcc\\", \\"vout\\", \\"gnd\\"]);
let vout2 = Net(\\"vout2\\");
"
`;

exports[`replicad adds errors and warnings when used incorrectly: adds errors and warnings when used incorrectly 1`] = `
"
let mistake1 = Nets()
let mistake2 = Net(\\"mistake\\")
let mistake3 = Nets(\\"mistake\\")

      ↓ ↓ ↓ ↓ ↓ ↓

const __replicad__warnings__ = [];
const __replicad__errors__ = [];

__replicad__errors__.append({
  \\"message\\": \\"'Nets' called without array pattern.\\",
  \\"loc\\": {
    \\"start\\": {
      \\"line\\": 1,
      \\"column\\": 0
    },
    \\"end\\": {
      \\"line\\": 1,
      \\"column\\": 21
    }
  }
});

let mistake2 = Net(\\"mistake2\\");

__replicad__warnings__.append({
  \\"message\\": \\"'Net' takes no arguments, 1 provided. Arguments will be ignored\\",
  \\"loc\\": {
    \\"start\\": {
      \\"line\\": 2,
      \\"column\\": 0
    },
    \\"end\\": {
      \\"line\\": 2,
      \\"column\\": 29
    }
  }
});

__replicad__errors__.append({
  \\"message\\": \\"'Nets' called without array pattern.\\",
  \\"loc\\": {
    \\"start\\": {
      \\"line\\": 3,
      \\"column\\": 0
    },
    \\"end\\": {
      \\"line\\": 3,
      \\"column\\": 30
    }
  }
});
"
`;

exports[`replicad bare Net and Nets cause errors: bare Net and Nets cause errors 1`] = `
"
Net()
Nets()

      ↓ ↓ ↓ ↓ ↓ ↓

const __replicad__warnings__ = [];
const __replicad__errors__ = [];
__replicad__errors__.append({
  \\"message\\": \\"'Net' called without being assigned to variable.\\",
  \\"loc\\": {
    \\"start\\": {
      \\"line\\": 1,
      \\"column\\": 0
    },
    \\"end\\": {
      \\"line\\": 1,
      \\"column\\": 5
    }
  }
});
__replicad__errors__.append({
  \\"message\\": \\"'Nets' called without being assigned to variables.\\",
  \\"loc\\": {
    \\"start\\": {
      \\"line\\": 2,
      \\"column\\": 0
    },
    \\"end\\": {
      \\"line\\": 2,
      \\"column\\": 6
    }
  }
});
"
`;
